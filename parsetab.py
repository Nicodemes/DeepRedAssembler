
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = b'\xdcH\xaa\xee\xb1\x07\xb2\xa4\x13\xa9M\xe4\x0c\xf2*+'
    
_lr_action_items = {'BIN':([9,],[10,]),'$end':([1,3,4,5,7,8,10,11,12,13,14,],[0,-1,-2,-3,-4,-5,-14,-13,-15,-6,-12,]),'SEGMENT':([0,1,3,4,5,7,8,10,11,12,13,14,],[2,2,-1,-2,-3,-4,-5,-14,-13,-15,-6,-12,]),'HEX':([9,],[11,]),'STRING':([9,],[12,]),'DECVAR':([6,],[9,]),'NAME':([2,5,7,8,10,11,12,13,14,],[6,6,-4,-5,-14,-13,-15,-6,-12,]),'DEC':([9,],[14,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'segmentList':([0,],[1,]),'varassign':([2,5,],[7,8,]),'literal':([9,],[13,]),'dataList':([2,],[5,]),'segment':([0,1,],[3,4,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> segmentList","S'",1,None,None,None),
  ('segmentList -> segment','segmentList',1,'p_segmentList','main.py',65),
  ('segmentList -> segmentList segment','segmentList',2,'p_segmentList','main.py',66),
  ('segment -> SEGMENT dataList','segment',2,'p_segment','main.py',74),
  ('dataList -> varassign','dataList',1,'p_dataList','main.py',86),
  ('dataList -> dataList varassign','dataList',2,'p_dataList','main.py',87),
  ('varassign -> NAME DECVAR literal','varassign',3,'p_varassign','main.py',95),
  ('variable -> NAME','variable',1,'p_variable','main.py',101),
  ('statement -> NAME LABLESIGN statement','statement',3,'p_statement_labled','main.py',105),
  ('statement -> OPCODE oprandList','statement',2,'p_statement','main.py',109),
  ('oprandList -> oprand','oprandList',1,'p_oprandList','main.py',113),
  ('oprandList -> oprandList oprand','oprandList',2,'p_oprandList','main.py',114),
  ('literal -> DEC','literal',1,'p_oprand_literal','main.py',122),
  ('literal -> HEX','literal',1,'p_oprand_literal','main.py',123),
  ('literal -> BIN','literal',1,'p_oprand_literal','main.py',124),
  ('literal -> STRING','literal',1,'p_oprand_literal','main.py',125),
  ('oprand -> variable','oprand',1,'p_oprand_var','main.py',131),
  ('oprand -> LBRACK literal RBRACK','oprand',3,'p_oprand_effadress','main.py',134),
  ('oprand -> LBRACK variable RBRACK','oprand',3,'p_oprand_effadress','main.py',135),
]
