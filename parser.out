Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    UNKNOWNVALUE
    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> segmentList
Rule 2     segmentList -> segment
Rule 3     segmentList -> segmentList segment
Rule 4     segment -> SEGMENT statementList
Rule 5     dataList -> varassign
Rule 6     dataList -> dataList varassign
Rule 7     varassign -> VARNAME DECLVAR literal
Rule 8     variable -> NAME
Rule 9     opcode -> OPCODE
Rule 10    statement -> opcode oprandList
Rule 11    statement -> LABLE statement
Rule 12    statementList -> statement
Rule 13    statementList -> statementList statement
Rule 14    literal -> DEC
Rule 15    literal -> HEX
Rule 16    literal -> BIN
Rule 17    literal -> STRING
Rule 18    oprand -> variable
Rule 19    oprand -> literal
Rule 20    oprand -> LBRACK literal RBRACK
Rule 21    oprand -> LBRACK variable RBRACK
Rule 22    oprandList -> oprand
Rule 23    oprandList -> oprandList oprand

Terminals, with rules where they appear

BIN                  : 16
COMMENT              : 
DEC                  : 14
DECLVAR              : 7
HEX                  : 15
LABLE                : 11
LBRACK               : 20 21
NAME                 : 8
OPCODE               : 9
RBRACK               : 20 21
SEGMENT              : 4
STRING               : 17
UNKNOWNVALUE         : 
VARNAME              : 7
error                : 

Nonterminals, with rules where they appear

dataList             : 6
literal              : 7 19 20
opcode               : 10
oprand               : 22 23
oprandList           : 10 23
program              : 0
segment              : 2 3
segmentList          : 1 3
statement            : 11 12 13
statementList        : 4 13
varassign            : 5 6
variable             : 18 21

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . segmentList
    (2) segmentList -> . segment
    (3) segmentList -> . segmentList segment
    (4) segment -> . SEGMENT statementList

    SEGMENT         shift and go to state 1

    segmentList                    shift and go to state 2
    segment                        shift and go to state 3
    program                        shift and go to state 4

state 1

    (4) segment -> SEGMENT . statementList
    (12) statementList -> . statement
    (13) statementList -> . statementList statement
    (10) statement -> . opcode oprandList
    (11) statement -> . LABLE statement
    (9) opcode -> . OPCODE

    LABLE           shift and go to state 5
    OPCODE          shift and go to state 7

    opcode                         shift and go to state 6
    statement                      shift and go to state 8
    statementList                  shift and go to state 9

state 2

    (1) program -> segmentList .
    (3) segmentList -> segmentList . segment
    (4) segment -> . SEGMENT statementList

    $end            reduce using rule 1 (program -> segmentList .)
    SEGMENT         shift and go to state 1

    segment                        shift and go to state 10

state 3

    (2) segmentList -> segment .

    SEGMENT         reduce using rule 2 (segmentList -> segment .)
    $end            reduce using rule 2 (segmentList -> segment .)


state 4

    (0) S' -> program .



state 5

    (11) statement -> LABLE . statement
    (10) statement -> . opcode oprandList
    (11) statement -> . LABLE statement
    (9) opcode -> . OPCODE

    LABLE           shift and go to state 5
    OPCODE          shift and go to state 7

    opcode                         shift and go to state 6
    statement                      shift and go to state 11

state 6

    (10) statement -> opcode . oprandList
    (22) oprandList -> . oprand
    (23) oprandList -> . oprandList oprand
    (18) oprand -> . variable
    (19) oprand -> . literal
    (20) oprand -> . LBRACK literal RBRACK
    (21) oprand -> . LBRACK variable RBRACK
    (8) variable -> . NAME
    (14) literal -> . DEC
    (15) literal -> . HEX
    (16) literal -> . BIN
    (17) literal -> . STRING

    LBRACK          shift and go to state 12
    NAME            shift and go to state 16
    DEC             shift and go to state 14
    HEX             shift and go to state 21
    BIN             shift and go to state 17
    STRING          shift and go to state 19

    oprandList                     shift and go to state 13
    oprand                         shift and go to state 18
    variable                       shift and go to state 20
    literal                        shift and go to state 15

state 7

    (9) opcode -> OPCODE .

    LBRACK          reduce using rule 9 (opcode -> OPCODE .)
    NAME            reduce using rule 9 (opcode -> OPCODE .)
    DEC             reduce using rule 9 (opcode -> OPCODE .)
    HEX             reduce using rule 9 (opcode -> OPCODE .)
    BIN             reduce using rule 9 (opcode -> OPCODE .)
    STRING          reduce using rule 9 (opcode -> OPCODE .)


state 8

    (12) statementList -> statement .

    LABLE           reduce using rule 12 (statementList -> statement .)
    OPCODE          reduce using rule 12 (statementList -> statement .)
    SEGMENT         reduce using rule 12 (statementList -> statement .)
    $end            reduce using rule 12 (statementList -> statement .)


state 9

    (4) segment -> SEGMENT statementList .
    (13) statementList -> statementList . statement
    (10) statement -> . opcode oprandList
    (11) statement -> . LABLE statement
    (9) opcode -> . OPCODE

    SEGMENT         reduce using rule 4 (segment -> SEGMENT statementList .)
    $end            reduce using rule 4 (segment -> SEGMENT statementList .)
    LABLE           shift and go to state 5
    OPCODE          shift and go to state 7

    opcode                         shift and go to state 6
    statement                      shift and go to state 22

state 10

    (3) segmentList -> segmentList segment .

    SEGMENT         reduce using rule 3 (segmentList -> segmentList segment .)
    $end            reduce using rule 3 (segmentList -> segmentList segment .)


state 11

    (11) statement -> LABLE statement .

    LABLE           reduce using rule 11 (statement -> LABLE statement .)
    OPCODE          reduce using rule 11 (statement -> LABLE statement .)
    SEGMENT         reduce using rule 11 (statement -> LABLE statement .)
    $end            reduce using rule 11 (statement -> LABLE statement .)


state 12

    (20) oprand -> LBRACK . literal RBRACK
    (21) oprand -> LBRACK . variable RBRACK
    (14) literal -> . DEC
    (15) literal -> . HEX
    (16) literal -> . BIN
    (17) literal -> . STRING
    (8) variable -> . NAME

    DEC             shift and go to state 14
    HEX             shift and go to state 21
    BIN             shift and go to state 17
    STRING          shift and go to state 19
    NAME            shift and go to state 16

    variable                       shift and go to state 24
    literal                        shift and go to state 23

state 13

    (10) statement -> opcode oprandList .
    (23) oprandList -> oprandList . oprand
    (18) oprand -> . variable
    (19) oprand -> . literal
    (20) oprand -> . LBRACK literal RBRACK
    (21) oprand -> . LBRACK variable RBRACK
    (8) variable -> . NAME
    (14) literal -> . DEC
    (15) literal -> . HEX
    (16) literal -> . BIN
    (17) literal -> . STRING

    LABLE           reduce using rule 10 (statement -> opcode oprandList .)
    OPCODE          reduce using rule 10 (statement -> opcode oprandList .)
    SEGMENT         reduce using rule 10 (statement -> opcode oprandList .)
    $end            reduce using rule 10 (statement -> opcode oprandList .)
    LBRACK          shift and go to state 12
    NAME            shift and go to state 16
    DEC             shift and go to state 14
    HEX             shift and go to state 21
    BIN             shift and go to state 17
    STRING          shift and go to state 19

    oprand                         shift and go to state 25
    variable                       shift and go to state 20
    literal                        shift and go to state 15

state 14

    (14) literal -> DEC .

    LBRACK          reduce using rule 14 (literal -> DEC .)
    NAME            reduce using rule 14 (literal -> DEC .)
    DEC             reduce using rule 14 (literal -> DEC .)
    HEX             reduce using rule 14 (literal -> DEC .)
    BIN             reduce using rule 14 (literal -> DEC .)
    STRING          reduce using rule 14 (literal -> DEC .)
    LABLE           reduce using rule 14 (literal -> DEC .)
    OPCODE          reduce using rule 14 (literal -> DEC .)
    SEGMENT         reduce using rule 14 (literal -> DEC .)
    $end            reduce using rule 14 (literal -> DEC .)
    RBRACK          reduce using rule 14 (literal -> DEC .)


state 15

    (19) oprand -> literal .

    LBRACK          reduce using rule 19 (oprand -> literal .)
    NAME            reduce using rule 19 (oprand -> literal .)
    DEC             reduce using rule 19 (oprand -> literal .)
    HEX             reduce using rule 19 (oprand -> literal .)
    BIN             reduce using rule 19 (oprand -> literal .)
    STRING          reduce using rule 19 (oprand -> literal .)
    LABLE           reduce using rule 19 (oprand -> literal .)
    OPCODE          reduce using rule 19 (oprand -> literal .)
    SEGMENT         reduce using rule 19 (oprand -> literal .)
    $end            reduce using rule 19 (oprand -> literal .)


state 16

    (8) variable -> NAME .

    LBRACK          reduce using rule 8 (variable -> NAME .)
    NAME            reduce using rule 8 (variable -> NAME .)
    DEC             reduce using rule 8 (variable -> NAME .)
    HEX             reduce using rule 8 (variable -> NAME .)
    BIN             reduce using rule 8 (variable -> NAME .)
    STRING          reduce using rule 8 (variable -> NAME .)
    LABLE           reduce using rule 8 (variable -> NAME .)
    OPCODE          reduce using rule 8 (variable -> NAME .)
    SEGMENT         reduce using rule 8 (variable -> NAME .)
    $end            reduce using rule 8 (variable -> NAME .)
    RBRACK          reduce using rule 8 (variable -> NAME .)


state 17

    (16) literal -> BIN .

    LBRACK          reduce using rule 16 (literal -> BIN .)
    NAME            reduce using rule 16 (literal -> BIN .)
    DEC             reduce using rule 16 (literal -> BIN .)
    HEX             reduce using rule 16 (literal -> BIN .)
    BIN             reduce using rule 16 (literal -> BIN .)
    STRING          reduce using rule 16 (literal -> BIN .)
    LABLE           reduce using rule 16 (literal -> BIN .)
    OPCODE          reduce using rule 16 (literal -> BIN .)
    SEGMENT         reduce using rule 16 (literal -> BIN .)
    $end            reduce using rule 16 (literal -> BIN .)
    RBRACK          reduce using rule 16 (literal -> BIN .)


state 18

    (22) oprandList -> oprand .

    LBRACK          reduce using rule 22 (oprandList -> oprand .)
    NAME            reduce using rule 22 (oprandList -> oprand .)
    DEC             reduce using rule 22 (oprandList -> oprand .)
    HEX             reduce using rule 22 (oprandList -> oprand .)
    BIN             reduce using rule 22 (oprandList -> oprand .)
    STRING          reduce using rule 22 (oprandList -> oprand .)
    LABLE           reduce using rule 22 (oprandList -> oprand .)
    OPCODE          reduce using rule 22 (oprandList -> oprand .)
    SEGMENT         reduce using rule 22 (oprandList -> oprand .)
    $end            reduce using rule 22 (oprandList -> oprand .)


state 19

    (17) literal -> STRING .

    LBRACK          reduce using rule 17 (literal -> STRING .)
    NAME            reduce using rule 17 (literal -> STRING .)
    DEC             reduce using rule 17 (literal -> STRING .)
    HEX             reduce using rule 17 (literal -> STRING .)
    BIN             reduce using rule 17 (literal -> STRING .)
    STRING          reduce using rule 17 (literal -> STRING .)
    LABLE           reduce using rule 17 (literal -> STRING .)
    OPCODE          reduce using rule 17 (literal -> STRING .)
    SEGMENT         reduce using rule 17 (literal -> STRING .)
    $end            reduce using rule 17 (literal -> STRING .)
    RBRACK          reduce using rule 17 (literal -> STRING .)


state 20

    (18) oprand -> variable .

    LBRACK          reduce using rule 18 (oprand -> variable .)
    NAME            reduce using rule 18 (oprand -> variable .)
    DEC             reduce using rule 18 (oprand -> variable .)
    HEX             reduce using rule 18 (oprand -> variable .)
    BIN             reduce using rule 18 (oprand -> variable .)
    STRING          reduce using rule 18 (oprand -> variable .)
    LABLE           reduce using rule 18 (oprand -> variable .)
    OPCODE          reduce using rule 18 (oprand -> variable .)
    SEGMENT         reduce using rule 18 (oprand -> variable .)
    $end            reduce using rule 18 (oprand -> variable .)


state 21

    (15) literal -> HEX .

    LBRACK          reduce using rule 15 (literal -> HEX .)
    NAME            reduce using rule 15 (literal -> HEX .)
    DEC             reduce using rule 15 (literal -> HEX .)
    HEX             reduce using rule 15 (literal -> HEX .)
    BIN             reduce using rule 15 (literal -> HEX .)
    STRING          reduce using rule 15 (literal -> HEX .)
    LABLE           reduce using rule 15 (literal -> HEX .)
    OPCODE          reduce using rule 15 (literal -> HEX .)
    SEGMENT         reduce using rule 15 (literal -> HEX .)
    $end            reduce using rule 15 (literal -> HEX .)
    RBRACK          reduce using rule 15 (literal -> HEX .)


state 22

    (13) statementList -> statementList statement .

    LABLE           reduce using rule 13 (statementList -> statementList statement .)
    OPCODE          reduce using rule 13 (statementList -> statementList statement .)
    SEGMENT         reduce using rule 13 (statementList -> statementList statement .)
    $end            reduce using rule 13 (statementList -> statementList statement .)


state 23

    (20) oprand -> LBRACK literal . RBRACK

    RBRACK          shift and go to state 26


state 24

    (21) oprand -> LBRACK variable . RBRACK

    RBRACK          shift and go to state 27


state 25

    (23) oprandList -> oprandList oprand .

    LBRACK          reduce using rule 23 (oprandList -> oprandList oprand .)
    NAME            reduce using rule 23 (oprandList -> oprandList oprand .)
    DEC             reduce using rule 23 (oprandList -> oprandList oprand .)
    HEX             reduce using rule 23 (oprandList -> oprandList oprand .)
    BIN             reduce using rule 23 (oprandList -> oprandList oprand .)
    STRING          reduce using rule 23 (oprandList -> oprandList oprand .)
    LABLE           reduce using rule 23 (oprandList -> oprandList oprand .)
    OPCODE          reduce using rule 23 (oprandList -> oprandList oprand .)
    SEGMENT         reduce using rule 23 (oprandList -> oprandList oprand .)
    $end            reduce using rule 23 (oprandList -> oprandList oprand .)


state 26

    (20) oprand -> LBRACK literal RBRACK .

    LBRACK          reduce using rule 20 (oprand -> LBRACK literal RBRACK .)
    NAME            reduce using rule 20 (oprand -> LBRACK literal RBRACK .)
    DEC             reduce using rule 20 (oprand -> LBRACK literal RBRACK .)
    HEX             reduce using rule 20 (oprand -> LBRACK literal RBRACK .)
    BIN             reduce using rule 20 (oprand -> LBRACK literal RBRACK .)
    STRING          reduce using rule 20 (oprand -> LBRACK literal RBRACK .)
    LABLE           reduce using rule 20 (oprand -> LBRACK literal RBRACK .)
    OPCODE          reduce using rule 20 (oprand -> LBRACK literal RBRACK .)
    SEGMENT         reduce using rule 20 (oprand -> LBRACK literal RBRACK .)
    $end            reduce using rule 20 (oprand -> LBRACK literal RBRACK .)


state 27

    (21) oprand -> LBRACK variable RBRACK .

    LBRACK          reduce using rule 21 (oprand -> LBRACK variable RBRACK .)
    NAME            reduce using rule 21 (oprand -> LBRACK variable RBRACK .)
    DEC             reduce using rule 21 (oprand -> LBRACK variable RBRACK .)
    HEX             reduce using rule 21 (oprand -> LBRACK variable RBRACK .)
    BIN             reduce using rule 21 (oprand -> LBRACK variable RBRACK .)
    STRING          reduce using rule 21 (oprand -> LBRACK variable RBRACK .)
    LABLE           reduce using rule 21 (oprand -> LBRACK variable RBRACK .)
    OPCODE          reduce using rule 21 (oprand -> LBRACK variable RBRACK .)
    SEGMENT         reduce using rule 21 (oprand -> LBRACK variable RBRACK .)
    $end            reduce using rule 21 (oprand -> LBRACK variable RBRACK .)

