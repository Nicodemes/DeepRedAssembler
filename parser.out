Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    UNKNOWNVALUE

Grammar

Rule 0     S' -> program
Rule 1     program -> segmentList
Rule 2     segmentList -> segment
Rule 3     segmentList -> segmentList segment
Rule 4     segment -> SEGMENT statementList
Rule 5     segment -> SEGMENT dataList
Rule 6     dataList -> varassign
Rule 7     dataList -> dataList varassign
Rule 8     varassign -> ID DECLVAR literal
Rule 9     variable -> ID
Rule 10    opcode -> OPCODE
Rule 11    statement -> opcode oprandList
Rule 12    statement -> LABLE statement
Rule 13    statementList -> statement
Rule 14    statementList -> statementList statement
Rule 15    literal -> DEC
Rule 16    literal -> HEX
Rule 17    literal -> BIN
Rule 18    literal -> STRING
Rule 19    oprand -> variable
Rule 20    oprand -> literal
Rule 21    oprand -> REGISTER8
Rule 22    oprand -> REGISTER16
Rule 23    oprand -> LBRACK literal RBRACK
Rule 24    oprand -> LBRACK variable RBRACK
Rule 25    oprandList -> oprand
Rule 26    oprandList -> oprandList oprand

Terminals, with rules where they appear

BIN                  : 17
COMMENT              : 
DEC                  : 15
DECLVAR              : 8
HEX                  : 16
ID                   : 8 9
LABLE                : 12
LBRACK               : 23 24
OPCODE               : 10
RBRACK               : 23 24
REGISTER16           : 22
REGISTER8            : 21
SEGMENT              : 4 5
STRING               : 18
UNKNOWNVALUE         : 
error                : 

Nonterminals, with rules where they appear

dataList             : 5 7
literal              : 8 20 23
opcode               : 11
oprand               : 25 26
oprandList           : 11 26
program              : 0
segment              : 2 3
segmentList          : 1 3
statement            : 12 13 14
statementList        : 4 14
varassign            : 6 7
variable             : 19 24

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . segmentList
    (2) segmentList -> . segment
    (3) segmentList -> . segmentList segment
    (4) segment -> . SEGMENT statementList
    (5) segment -> . SEGMENT dataList

    SEGMENT         shift and go to state 3

    program                        shift and go to state 1
    segment                        shift and go to state 2
    segmentList                    shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (2) segmentList -> segment .

    SEGMENT         reduce using rule 2 (segmentList -> segment .)
    $end            reduce using rule 2 (segmentList -> segment .)


state 3

    (4) segment -> SEGMENT . statementList
    (5) segment -> SEGMENT . dataList
    (13) statementList -> . statement
    (14) statementList -> . statementList statement
    (6) dataList -> . varassign
    (7) dataList -> . dataList varassign
    (11) statement -> . opcode oprandList
    (12) statement -> . LABLE statement
    (8) varassign -> . ID DECLVAR literal
    (10) opcode -> . OPCODE

    LABLE           shift and go to state 6
    ID              shift and go to state 12
    OPCODE          shift and go to state 7

    dataList                       shift and go to state 5
    statement                      shift and go to state 9
    statementList                  shift and go to state 10
    varassign                      shift and go to state 11
    opcode                         shift and go to state 8

state 4

    (1) program -> segmentList .
    (3) segmentList -> segmentList . segment
    (4) segment -> . SEGMENT statementList
    (5) segment -> . SEGMENT dataList

    $end            reduce using rule 1 (program -> segmentList .)
    SEGMENT         shift and go to state 3

    segment                        shift and go to state 13

state 5

    (5) segment -> SEGMENT dataList .
    (7) dataList -> dataList . varassign
    (8) varassign -> . ID DECLVAR literal

    SEGMENT         reduce using rule 5 (segment -> SEGMENT dataList .)
    $end            reduce using rule 5 (segment -> SEGMENT dataList .)
    ID              shift and go to state 12

    varassign                      shift and go to state 14

state 6

    (12) statement -> LABLE . statement
    (11) statement -> . opcode oprandList
    (12) statement -> . LABLE statement
    (10) opcode -> . OPCODE

    LABLE           shift and go to state 6
    OPCODE          shift and go to state 7

    opcode                         shift and go to state 8
    statement                      shift and go to state 15

state 7

    (10) opcode -> OPCODE .

    REGISTER8       reduce using rule 10 (opcode -> OPCODE .)
    REGISTER16      reduce using rule 10 (opcode -> OPCODE .)
    LBRACK          reduce using rule 10 (opcode -> OPCODE .)
    ID              reduce using rule 10 (opcode -> OPCODE .)
    DEC             reduce using rule 10 (opcode -> OPCODE .)
    HEX             reduce using rule 10 (opcode -> OPCODE .)
    BIN             reduce using rule 10 (opcode -> OPCODE .)
    STRING          reduce using rule 10 (opcode -> OPCODE .)


state 8

    (11) statement -> opcode . oprandList
    (25) oprandList -> . oprand
    (26) oprandList -> . oprandList oprand
    (19) oprand -> . variable
    (20) oprand -> . literal
    (21) oprand -> . REGISTER8
    (22) oprand -> . REGISTER16
    (23) oprand -> . LBRACK literal RBRACK
    (24) oprand -> . LBRACK variable RBRACK
    (9) variable -> . ID
    (15) literal -> . DEC
    (16) literal -> . HEX
    (17) literal -> . BIN
    (18) literal -> . STRING

    REGISTER8       shift and go to state 17
    REGISTER16      shift and go to state 18
    LBRACK          shift and go to state 25
    ID              shift and go to state 27
    DEC             shift and go to state 26
    HEX             shift and go to state 24
    BIN             shift and go to state 20
    STRING          shift and go to state 23

    variable                       shift and go to state 19
    literal                        shift and go to state 21
    oprandList                     shift and go to state 22
    oprand                         shift and go to state 16

state 9

    (13) statementList -> statement .

    LABLE           reduce using rule 13 (statementList -> statement .)
    OPCODE          reduce using rule 13 (statementList -> statement .)
    SEGMENT         reduce using rule 13 (statementList -> statement .)
    $end            reduce using rule 13 (statementList -> statement .)


state 10

    (4) segment -> SEGMENT statementList .
    (14) statementList -> statementList . statement
    (11) statement -> . opcode oprandList
    (12) statement -> . LABLE statement
    (10) opcode -> . OPCODE

    SEGMENT         reduce using rule 4 (segment -> SEGMENT statementList .)
    $end            reduce using rule 4 (segment -> SEGMENT statementList .)
    LABLE           shift and go to state 6
    OPCODE          shift and go to state 7

    opcode                         shift and go to state 8
    statement                      shift and go to state 28

state 11

    (6) dataList -> varassign .

    ID              reduce using rule 6 (dataList -> varassign .)
    SEGMENT         reduce using rule 6 (dataList -> varassign .)
    $end            reduce using rule 6 (dataList -> varassign .)


state 12

    (8) varassign -> ID . DECLVAR literal

    DECLVAR         shift and go to state 29


state 13

    (3) segmentList -> segmentList segment .

    SEGMENT         reduce using rule 3 (segmentList -> segmentList segment .)
    $end            reduce using rule 3 (segmentList -> segmentList segment .)


state 14

    (7) dataList -> dataList varassign .

    ID              reduce using rule 7 (dataList -> dataList varassign .)
    SEGMENT         reduce using rule 7 (dataList -> dataList varassign .)
    $end            reduce using rule 7 (dataList -> dataList varassign .)


state 15

    (12) statement -> LABLE statement .

    LABLE           reduce using rule 12 (statement -> LABLE statement .)
    OPCODE          reduce using rule 12 (statement -> LABLE statement .)
    SEGMENT         reduce using rule 12 (statement -> LABLE statement .)
    $end            reduce using rule 12 (statement -> LABLE statement .)


state 16

    (25) oprandList -> oprand .

    REGISTER8       reduce using rule 25 (oprandList -> oprand .)
    REGISTER16      reduce using rule 25 (oprandList -> oprand .)
    LBRACK          reduce using rule 25 (oprandList -> oprand .)
    ID              reduce using rule 25 (oprandList -> oprand .)
    DEC             reduce using rule 25 (oprandList -> oprand .)
    HEX             reduce using rule 25 (oprandList -> oprand .)
    BIN             reduce using rule 25 (oprandList -> oprand .)
    STRING          reduce using rule 25 (oprandList -> oprand .)
    LABLE           reduce using rule 25 (oprandList -> oprand .)
    OPCODE          reduce using rule 25 (oprandList -> oprand .)
    SEGMENT         reduce using rule 25 (oprandList -> oprand .)
    $end            reduce using rule 25 (oprandList -> oprand .)


state 17

    (21) oprand -> REGISTER8 .

    REGISTER8       reduce using rule 21 (oprand -> REGISTER8 .)
    REGISTER16      reduce using rule 21 (oprand -> REGISTER8 .)
    LBRACK          reduce using rule 21 (oprand -> REGISTER8 .)
    ID              reduce using rule 21 (oprand -> REGISTER8 .)
    DEC             reduce using rule 21 (oprand -> REGISTER8 .)
    HEX             reduce using rule 21 (oprand -> REGISTER8 .)
    BIN             reduce using rule 21 (oprand -> REGISTER8 .)
    STRING          reduce using rule 21 (oprand -> REGISTER8 .)
    LABLE           reduce using rule 21 (oprand -> REGISTER8 .)
    OPCODE          reduce using rule 21 (oprand -> REGISTER8 .)
    SEGMENT         reduce using rule 21 (oprand -> REGISTER8 .)
    $end            reduce using rule 21 (oprand -> REGISTER8 .)


state 18

    (22) oprand -> REGISTER16 .

    REGISTER8       reduce using rule 22 (oprand -> REGISTER16 .)
    REGISTER16      reduce using rule 22 (oprand -> REGISTER16 .)
    LBRACK          reduce using rule 22 (oprand -> REGISTER16 .)
    ID              reduce using rule 22 (oprand -> REGISTER16 .)
    DEC             reduce using rule 22 (oprand -> REGISTER16 .)
    HEX             reduce using rule 22 (oprand -> REGISTER16 .)
    BIN             reduce using rule 22 (oprand -> REGISTER16 .)
    STRING          reduce using rule 22 (oprand -> REGISTER16 .)
    LABLE           reduce using rule 22 (oprand -> REGISTER16 .)
    OPCODE          reduce using rule 22 (oprand -> REGISTER16 .)
    SEGMENT         reduce using rule 22 (oprand -> REGISTER16 .)
    $end            reduce using rule 22 (oprand -> REGISTER16 .)


state 19

    (19) oprand -> variable .

    REGISTER8       reduce using rule 19 (oprand -> variable .)
    REGISTER16      reduce using rule 19 (oprand -> variable .)
    LBRACK          reduce using rule 19 (oprand -> variable .)
    ID              reduce using rule 19 (oprand -> variable .)
    DEC             reduce using rule 19 (oprand -> variable .)
    HEX             reduce using rule 19 (oprand -> variable .)
    BIN             reduce using rule 19 (oprand -> variable .)
    STRING          reduce using rule 19 (oprand -> variable .)
    LABLE           reduce using rule 19 (oprand -> variable .)
    OPCODE          reduce using rule 19 (oprand -> variable .)
    SEGMENT         reduce using rule 19 (oprand -> variable .)
    $end            reduce using rule 19 (oprand -> variable .)


state 20

    (17) literal -> BIN .

    RBRACK          reduce using rule 17 (literal -> BIN .)
    ID              reduce using rule 17 (literal -> BIN .)
    SEGMENT         reduce using rule 17 (literal -> BIN .)
    $end            reduce using rule 17 (literal -> BIN .)
    REGISTER8       reduce using rule 17 (literal -> BIN .)
    REGISTER16      reduce using rule 17 (literal -> BIN .)
    LBRACK          reduce using rule 17 (literal -> BIN .)
    DEC             reduce using rule 17 (literal -> BIN .)
    HEX             reduce using rule 17 (literal -> BIN .)
    BIN             reduce using rule 17 (literal -> BIN .)
    STRING          reduce using rule 17 (literal -> BIN .)
    LABLE           reduce using rule 17 (literal -> BIN .)
    OPCODE          reduce using rule 17 (literal -> BIN .)


state 21

    (20) oprand -> literal .

    REGISTER8       reduce using rule 20 (oprand -> literal .)
    REGISTER16      reduce using rule 20 (oprand -> literal .)
    LBRACK          reduce using rule 20 (oprand -> literal .)
    ID              reduce using rule 20 (oprand -> literal .)
    DEC             reduce using rule 20 (oprand -> literal .)
    HEX             reduce using rule 20 (oprand -> literal .)
    BIN             reduce using rule 20 (oprand -> literal .)
    STRING          reduce using rule 20 (oprand -> literal .)
    LABLE           reduce using rule 20 (oprand -> literal .)
    OPCODE          reduce using rule 20 (oprand -> literal .)
    SEGMENT         reduce using rule 20 (oprand -> literal .)
    $end            reduce using rule 20 (oprand -> literal .)


state 22

    (11) statement -> opcode oprandList .
    (26) oprandList -> oprandList . oprand
    (19) oprand -> . variable
    (20) oprand -> . literal
    (21) oprand -> . REGISTER8
    (22) oprand -> . REGISTER16
    (23) oprand -> . LBRACK literal RBRACK
    (24) oprand -> . LBRACK variable RBRACK
    (9) variable -> . ID
    (15) literal -> . DEC
    (16) literal -> . HEX
    (17) literal -> . BIN
    (18) literal -> . STRING

    LABLE           reduce using rule 11 (statement -> opcode oprandList .)
    OPCODE          reduce using rule 11 (statement -> opcode oprandList .)
    SEGMENT         reduce using rule 11 (statement -> opcode oprandList .)
    $end            reduce using rule 11 (statement -> opcode oprandList .)
    REGISTER8       shift and go to state 17
    REGISTER16      shift and go to state 18
    LBRACK          shift and go to state 25
    ID              shift and go to state 27
    DEC             shift and go to state 26
    HEX             shift and go to state 24
    BIN             shift and go to state 20
    STRING          shift and go to state 23

    variable                       shift and go to state 19
    literal                        shift and go to state 21
    oprand                         shift and go to state 30

state 23

    (18) literal -> STRING .

    RBRACK          reduce using rule 18 (literal -> STRING .)
    ID              reduce using rule 18 (literal -> STRING .)
    SEGMENT         reduce using rule 18 (literal -> STRING .)
    $end            reduce using rule 18 (literal -> STRING .)
    REGISTER8       reduce using rule 18 (literal -> STRING .)
    REGISTER16      reduce using rule 18 (literal -> STRING .)
    LBRACK          reduce using rule 18 (literal -> STRING .)
    DEC             reduce using rule 18 (literal -> STRING .)
    HEX             reduce using rule 18 (literal -> STRING .)
    BIN             reduce using rule 18 (literal -> STRING .)
    STRING          reduce using rule 18 (literal -> STRING .)
    LABLE           reduce using rule 18 (literal -> STRING .)
    OPCODE          reduce using rule 18 (literal -> STRING .)


state 24

    (16) literal -> HEX .

    RBRACK          reduce using rule 16 (literal -> HEX .)
    ID              reduce using rule 16 (literal -> HEX .)
    SEGMENT         reduce using rule 16 (literal -> HEX .)
    $end            reduce using rule 16 (literal -> HEX .)
    REGISTER8       reduce using rule 16 (literal -> HEX .)
    REGISTER16      reduce using rule 16 (literal -> HEX .)
    LBRACK          reduce using rule 16 (literal -> HEX .)
    DEC             reduce using rule 16 (literal -> HEX .)
    HEX             reduce using rule 16 (literal -> HEX .)
    BIN             reduce using rule 16 (literal -> HEX .)
    STRING          reduce using rule 16 (literal -> HEX .)
    LABLE           reduce using rule 16 (literal -> HEX .)
    OPCODE          reduce using rule 16 (literal -> HEX .)


state 25

    (23) oprand -> LBRACK . literal RBRACK
    (24) oprand -> LBRACK . variable RBRACK
    (15) literal -> . DEC
    (16) literal -> . HEX
    (17) literal -> . BIN
    (18) literal -> . STRING
    (9) variable -> . ID

    DEC             shift and go to state 26
    HEX             shift and go to state 24
    BIN             shift and go to state 20
    STRING          shift and go to state 23
    ID              shift and go to state 27

    variable                       shift and go to state 32
    literal                        shift and go to state 31

state 26

    (15) literal -> DEC .

    RBRACK          reduce using rule 15 (literal -> DEC .)
    ID              reduce using rule 15 (literal -> DEC .)
    SEGMENT         reduce using rule 15 (literal -> DEC .)
    $end            reduce using rule 15 (literal -> DEC .)
    REGISTER8       reduce using rule 15 (literal -> DEC .)
    REGISTER16      reduce using rule 15 (literal -> DEC .)
    LBRACK          reduce using rule 15 (literal -> DEC .)
    DEC             reduce using rule 15 (literal -> DEC .)
    HEX             reduce using rule 15 (literal -> DEC .)
    BIN             reduce using rule 15 (literal -> DEC .)
    STRING          reduce using rule 15 (literal -> DEC .)
    LABLE           reduce using rule 15 (literal -> DEC .)
    OPCODE          reduce using rule 15 (literal -> DEC .)


state 27

    (9) variable -> ID .

    REGISTER8       reduce using rule 9 (variable -> ID .)
    REGISTER16      reduce using rule 9 (variable -> ID .)
    LBRACK          reduce using rule 9 (variable -> ID .)
    ID              reduce using rule 9 (variable -> ID .)
    DEC             reduce using rule 9 (variable -> ID .)
    HEX             reduce using rule 9 (variable -> ID .)
    BIN             reduce using rule 9 (variable -> ID .)
    STRING          reduce using rule 9 (variable -> ID .)
    LABLE           reduce using rule 9 (variable -> ID .)
    OPCODE          reduce using rule 9 (variable -> ID .)
    SEGMENT         reduce using rule 9 (variable -> ID .)
    $end            reduce using rule 9 (variable -> ID .)
    RBRACK          reduce using rule 9 (variable -> ID .)


state 28

    (14) statementList -> statementList statement .

    LABLE           reduce using rule 14 (statementList -> statementList statement .)
    OPCODE          reduce using rule 14 (statementList -> statementList statement .)
    SEGMENT         reduce using rule 14 (statementList -> statementList statement .)
    $end            reduce using rule 14 (statementList -> statementList statement .)


state 29

    (8) varassign -> ID DECLVAR . literal
    (15) literal -> . DEC
    (16) literal -> . HEX
    (17) literal -> . BIN
    (18) literal -> . STRING

    DEC             shift and go to state 26
    HEX             shift and go to state 24
    BIN             shift and go to state 20
    STRING          shift and go to state 23

    literal                        shift and go to state 33

state 30

    (26) oprandList -> oprandList oprand .

    REGISTER8       reduce using rule 26 (oprandList -> oprandList oprand .)
    REGISTER16      reduce using rule 26 (oprandList -> oprandList oprand .)
    LBRACK          reduce using rule 26 (oprandList -> oprandList oprand .)
    ID              reduce using rule 26 (oprandList -> oprandList oprand .)
    DEC             reduce using rule 26 (oprandList -> oprandList oprand .)
    HEX             reduce using rule 26 (oprandList -> oprandList oprand .)
    BIN             reduce using rule 26 (oprandList -> oprandList oprand .)
    STRING          reduce using rule 26 (oprandList -> oprandList oprand .)
    LABLE           reduce using rule 26 (oprandList -> oprandList oprand .)
    OPCODE          reduce using rule 26 (oprandList -> oprandList oprand .)
    SEGMENT         reduce using rule 26 (oprandList -> oprandList oprand .)
    $end            reduce using rule 26 (oprandList -> oprandList oprand .)


state 31

    (23) oprand -> LBRACK literal . RBRACK

    RBRACK          shift and go to state 34


state 32

    (24) oprand -> LBRACK variable . RBRACK

    RBRACK          shift and go to state 35


state 33

    (8) varassign -> ID DECLVAR literal .

    ID              reduce using rule 8 (varassign -> ID DECLVAR literal .)
    SEGMENT         reduce using rule 8 (varassign -> ID DECLVAR literal .)
    $end            reduce using rule 8 (varassign -> ID DECLVAR literal .)


state 34

    (23) oprand -> LBRACK literal RBRACK .

    REGISTER8       reduce using rule 23 (oprand -> LBRACK literal RBRACK .)
    REGISTER16      reduce using rule 23 (oprand -> LBRACK literal RBRACK .)
    LBRACK          reduce using rule 23 (oprand -> LBRACK literal RBRACK .)
    ID              reduce using rule 23 (oprand -> LBRACK literal RBRACK .)
    DEC             reduce using rule 23 (oprand -> LBRACK literal RBRACK .)
    HEX             reduce using rule 23 (oprand -> LBRACK literal RBRACK .)
    BIN             reduce using rule 23 (oprand -> LBRACK literal RBRACK .)
    STRING          reduce using rule 23 (oprand -> LBRACK literal RBRACK .)
    LABLE           reduce using rule 23 (oprand -> LBRACK literal RBRACK .)
    OPCODE          reduce using rule 23 (oprand -> LBRACK literal RBRACK .)
    SEGMENT         reduce using rule 23 (oprand -> LBRACK literal RBRACK .)
    $end            reduce using rule 23 (oprand -> LBRACK literal RBRACK .)


state 35

    (24) oprand -> LBRACK variable RBRACK .

    REGISTER8       reduce using rule 24 (oprand -> LBRACK variable RBRACK .)
    REGISTER16      reduce using rule 24 (oprand -> LBRACK variable RBRACK .)
    LBRACK          reduce using rule 24 (oprand -> LBRACK variable RBRACK .)
    ID              reduce using rule 24 (oprand -> LBRACK variable RBRACK .)
    DEC             reduce using rule 24 (oprand -> LBRACK variable RBRACK .)
    HEX             reduce using rule 24 (oprand -> LBRACK variable RBRACK .)
    BIN             reduce using rule 24 (oprand -> LBRACK variable RBRACK .)
    STRING          reduce using rule 24 (oprand -> LBRACK variable RBRACK .)
    LABLE           reduce using rule 24 (oprand -> LBRACK variable RBRACK .)
    OPCODE          reduce using rule 24 (oprand -> LBRACK variable RBRACK .)
    SEGMENT         reduce using rule 24 (oprand -> LBRACK variable RBRACK .)
    $end            reduce using rule 24 (oprand -> LBRACK variable RBRACK .)

